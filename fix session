#include <iostream>
#include <fix8/f8includes.hpp>
#include <fix8/asio.hpp> // If using ASIO as IO transport

using namespace FIX8;

class MySession : public FIX8::Session
{
public:
    MySession() : FIX8::Session("SenderCompID", "TargetCompID") {}

    virtual void app_to_admin(const std::string& s) override
    {
        // Handle application to admin messages
    }

    virtual void admin_to_app(const std::string& s, const unsigned short MsgType) override
    {
        // Handle admin to application messages
    }
};

int main()
{
    try
    {
        f8api::init_logging("log.cfg");

        FIX8::F8MetaCntx context;
        MySession session;
        FIX8::Persister persister("store");

        // Configure session parameters
        session.set_protocol(F8MetaCntx::protocol());
        session.set_heartbeat_interval(30);
        session.set_persister(&persister);

        // Start the session
        session.start(context, "config.cfg");
        session.wait();
    }
    catch (const std::exception& ex)
    {
        std::cerr << "Exception: " << ex.what() << std::endl;
        return 1;
    }

    return 0;
}
